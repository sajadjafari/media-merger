{"version":3,"sources":["../src/index.ts"],"sourcesContent":["import {interval, Subscription} from 'rxjs';\nimport AudioMerger from 'audio-merger';\nimport {nanoid} from 'nanoid';\n\nexport type SourceType = 'visual' | 'sound';\nexport type SourceKind =\n    'audioinput'\n    | 'videoinput'\n    | 'displaycapture'\n    | 'windowcapture'\n    | 'browsercapture'\n    | 'videofile'\n    | 'audiofile'\n    | 'imagefile';\n\nexport type MergerOptions = {\n    debug: boolean;\n}\n\nexport type MergerPosition = { x: number; y: number; w: number; h: number; };\n\nexport type MergerSource = {\n    id?: string;\n    index?: number;\n    source: MediaStream | HTMLImageElement | HTMLVideoElement | HTMLAudioElement;\n    name: string;\n    type: SourceType;\n    kind: SourceKind;\n    position?: MergerPosition;\n}\n\ntype SourceItem = {\n    id: string;\n    index: number;\n    source: MediaStream | HTMLImageElement | HTMLVideoElement;\n    element: HTMLVideoElement | HTMLImageElement | null;\n    vertices: Float32Array;\n    position: MergerPosition;\n};\n\nexport default class StudioMerger {\n    public canvas: HTMLCanvasElement;\n\n    readonly gl: WebGL2RenderingContext;\n\n    readonly program: WebGLProgram;\n\n    readonly debug: boolean;\n\n    public width: number = 1920;\n\n    public height: number = 1080;\n\n    public fps: number = 40;\n\n    public isRendering: boolean = false;\n\n    public result: MediaStream;\n\n    private sources: Map<string, SourceItem> = new Map();\n\n    public destroyed = false;\n\n    private rxIntervalSub: Subscription | null = null;\n\n    public mixer: AudioMerger | null = null;\n\n    constructor(options?: MergerOptions) {\n        this.debug = options?.debug || false;\n        // Check for support\n        const canvas = document.createElement('canvas');\n        if (!('AudioContext' in window && 'createMediaElementSource' in AudioContext.prototype))\n            throw 'AudioContext is not supported!';\n        if (!canvas.captureStream)\n            throw 'Canvas is not supported!';\n        if (!canvas.getContext('webgl2'))\n            throw 'WebGL is not supported!';\n\n        this.canvas = document.createElement('canvas');\n        this.canvas.width = this.width;\n        this.canvas.height = this.height;\n        this.canvas.addEventListener('webglcontextlost', (e: Event) => console.error(e), false);\n        this.gl = this.canvas.getContext('webgl2', {\n            alpha: false,\n            premultipliedAlpha: false,\n            antialias: true,\n            preserveDrawingBuffer: false,\n            powerPreference: 'default',\n        }) as WebGL2RenderingContext;\n        // Set viewport\n        this.gl.viewport(0, 0, this.canvas.width, this.canvas.height);\n\n        // Create shaders\n        const vertexShaderSource = `#version 300 es\n            layout(location=0) in vec2 aPosition;\n            layout(location=1) in vec2 aTextCoords;\n            out vec2 vTextCoords;\n            void main() {\n                vTextCoords = aTextCoords;\n                gl_Position = vec4(aPosition, 0.0, 1.0);\n            }\n        `;\n        const fragmentShaderSource = `#version 300 es\n            precision mediump float;\n            uniform sampler2D uSampler;\n            in vec2 vTextCoords;\n            out vec4 fragColor;\n            void main() {\n                fragColor = texture(uSampler, vTextCoords);\n            }\n        `;\n\n        this.program = this.gl.createProgram() as WebGLProgram;\n        // Add shader Source, Compile, and Attach to Program\n        // Vertex shader\n        const vertexShader = this.gl.createShader(this.gl.VERTEX_SHADER) as WebGLShader;\n        this.gl.shaderSource(vertexShader, vertexShaderSource);\n        this.gl.compileShader(vertexShader);\n        this.gl.attachShader(this.program, vertexShader);\n        // Fragment shader\n        const fragmentShader = this.gl.createShader(this.gl.FRAGMENT_SHADER) as WebGLShader;\n        this.gl.shaderSource(fragmentShader, fragmentShaderSource);\n        this.gl.compileShader(fragmentShader);\n        this.gl.attachShader(this.program, fragmentShader);\n        // Link program\n        this.gl.linkProgram(this.program);\n\n        if (this.debug) {\n            const debugInfo = this.gl.getExtension('WEBGL_debug_renderer_info');\n            if (debugInfo) {\n                const vendor = this.gl.getParameter(debugInfo.UNMASKED_VENDOR_WEBGL);\n                const renderer = this.gl.getParameter(debugInfo.UNMASKED_RENDERER_WEBGL);\n                console.log(`DEBUG_INFO: Vendor: ${vendor}, Renderer: ${renderer}`, debugInfo);\n            }\n            if (!this.gl.getShaderParameter(vertexShader, this.gl.COMPILE_STATUS))\n                console.error(`ERROR compiling vertex shader!`, this.gl.getShaderInfoLog(vertexShader));\n            if (!this.gl.getShaderParameter(fragmentShader, this.gl.COMPILE_STATUS))\n                console.error(`ERROR compiling fragment shader!`, this.gl.getShaderInfoLog(fragmentShader));\n            if (!this.gl.getProgramParameter(this.program, this.gl.LINK_STATUS))\n                console.error('Error linking program:', this.gl.getProgramInfoLog(this.program));\n        }\n\n        // Attach program\n        this.gl.useProgram(this.program);\n\n        // Bind texCoordsBuffer\n        const texCoordsBuffer = this.gl.createBuffer();\n        const texCoordsBufferData = new Float32Array([0, 1, 0, 0, 1, 1, 1, 0]);\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, texCoordsBuffer);\n        this.gl.bufferData(this.gl.ARRAY_BUFFER, texCoordsBufferData, this.gl.STATIC_DRAW);\n        this.gl.vertexAttribPointer(1, 2, this.gl.FLOAT, false, 0, 0);\n        this.gl.enableVertexAttribArray(1);\n        // Bind texture\n        const texture = this.gl.createTexture();\n        this.gl.uniform1i(this.gl.getUniformLocation(this.program, 'uSampler'), 0);\n        this.gl.bindTexture(this.gl.TEXTURE_2D, texture);\n        this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_MIN_FILTER, this.gl.NEAREST);\n        this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_WRAP_S, this.gl.MIRRORED_REPEAT);\n\n        // Flip the picture\n        this.gl.pixelStorei(this.gl.UNPACK_FLIP_Y_WEBGL, true);\n\n        this.result = this.canvas.captureStream(this.fps);\n    }\n\n    getPosition(position?: MergerPosition): MergerPosition {\n        if (position) return position;\n        const size = this.sources.size + 1;\n        const gridSize = Math.ceil(Math.sqrt(size));\n        const w = Math.floor(this.canvas.width / gridSize);\n        const h = Math.floor(this.canvas.height / gridSize);\n        const axis = (index: number) => {\n            const row = Math.floor(index / gridSize);\n            const col = index % gridSize;\n            return {x: col * w, y: row * h};\n        };\n\n        if (this.sources.size) {\n            [...this.sources].forEach(([, source], index) => {\n                if (index < this.sources.size) {\n                    this.updatePosition(source.id, {...axis(index), w, h});\n                }\n            });\n        }\n        return {...axis(this.sources.size), w, h};\n    }\n\n    translatePositionToVertices = (position?: MergerPosition): Float32Array => {\n        const {width, height} = this.canvas;\n        const {x: posX, y: posY, w: posW, h: posH} = this.getPosition(position);\n        const pixelX = 2 / width;\n        const pixelY = 2 / height;\n        const x1 = pixelX * posX - 1;\n        const x2 = pixelX * (posX + posW) - 1;\n        const y1 = pixelY * (height - posY) - 1;\n        const y2 = pixelY * (height - (posY + posH)) - 1;\n        return new Float32Array([x1, y1, x1, y2, x2, y1, x2, y2]); // topLeft (2), bottomLeft (2), topRight (2), bottomRight (2)\n    };\n\n    updatePosition(mediaStream: MediaStream | string, position: MergerPosition) {\n        const id = typeof mediaStream === 'string' ? mediaStream : mediaStream.id;\n        const stream = this.sources.get(id);\n        if (stream) {\n            this.sources.set(id, {\n                ...stream,\n                vertices: this.translatePositionToVertices(position),\n            });\n        }\n    }\n\n    private createVideoElement(stream: MediaStream): HTMLVideoElement {\n        const video = document.createElement('video');\n        video.muted = true;\n        video.style.position = 'absolute';\n        video.style.top = '0';\n        video.style.left = '0';\n        video.style.opacity = '0';\n        video.srcObject = stream as MediaStream;\n        video.play().catch(err => {\n            console.error('Merger failed to add stream', err);\n        });\n        return video;\n    }\n\n    draw() {\n        try {\n            this.gl.clear(this.gl.COLOR_BUFFER_BIT | this.gl.DEPTH_BUFFER_BIT);\n            this.gl.clearDepth(this.gl.getParameter(this.gl.DEPTH_CLEAR_VALUE));\n            this.gl.clearColor(0, 0, 0, 0);\n            if (!this.isRendering) {\n                if (this.rxIntervalSub?.unsubscribe) this.rxIntervalSub.unsubscribe();\n                return;\n            }\n            this.sources.forEach(({element, vertices}) => {\n                if (!element || (element instanceof HTMLVideoElement && element.readyState < 3)) return;\n                const vertexBuffer = this.gl.createBuffer();\n                this.gl.bindBuffer(this.gl.ARRAY_BUFFER, vertexBuffer);\n                this.gl.bufferData(this.gl.ARRAY_BUFFER, vertices, this.gl.STATIC_DRAW);\n                this.gl.vertexAttribPointer(0, 2, this.gl.FLOAT, false, 2 * 4, 0);\n                this.gl.enableVertexAttribArray(0);\n                this.gl.texImage2D(\n                    this.gl.TEXTURE_2D,\n                    0,\n                    this.gl.RGB,\n                    element instanceof HTMLVideoElement ? element.videoWidth : element.width,\n                    element instanceof HTMLVideoElement ? element.videoHeight : element.height,\n                    0,\n                    this.gl.RGB,\n                    this.gl.UNSIGNED_BYTE,\n                    element,\n                );\n                this.gl.drawArrays(this.gl.TRIANGLE_STRIP, 0, 4);\n                this.gl.deleteBuffer(vertexBuffer);\n            });\n        } catch (err) {\n            console.error(err);\n        }\n    }\n\n    start() {\n        this.isRendering = true;\n        this.rxIntervalSub = interval(1000 / this.fps).subscribe(() => this.draw());\n    }\n\n    addSource({id: sourceId, index, name, source, position, type}: MergerSource) {\n        const id = sourceId || nanoid();\n        if (this.destroyed) {\n            throw 'StudioMerger: Merger has been destroyed, Please create a new instance!';\n        }\n        if (!this.mixer) this.mixer = new AudioMerger();\n        if (!this.result?.getAudioTracks().length) {\n            this.result.addTrack(this.mixer.getOutputStream().getAudioTracks()[0]);\n        }\n        // Add Audio\n        if (source instanceof MediaStream && (type === 'sound' || source.getAudioTracks().length > 0)) {\n            this.mixer.addSource(name, source);\n        }\n        if (type === 'sound' && source instanceof HTMLMediaElement) {\n            source.id = id;\n            void source.play();\n            this.mixer.addSource(name, source);\n        }\n        // Add Video\n        if (type === 'visual') {\n            const id = sourceId || (source instanceof MediaStream ? source.id : nanoid());\n            if (!(source instanceof MediaStream)) {\n                source.id = id;\n            }\n            if (source instanceof HTMLVideoElement) {\n                void source.play();\n            }\n            this.sources.set(source.id, {\n                id,\n                index: index || this.sources.size,\n                source: source as MediaStream | HTMLImageElement | HTMLVideoElement,\n                vertices: this.translatePositionToVertices(position),\n                position: this.getPosition(position),\n                element: source instanceof MediaStream\n                    ? this.createVideoElement(source)\n                    : source as HTMLImageElement | HTMLVideoElement,\n            });\n        }\n        if (!this.isRendering && this.sources.size || this.mixer.getSources().size) this.start();\n    }\n\n    removeStream(id: string) {\n        // Delete sound\n        if (this.mixer && this.mixer.getSources().has(id)) {\n            this.mixer.removeSource(id);\n        }\n        // Remove visual\n        const source = this.sources.get(id);\n        if (source) {\n            if (source.element) source.element.remove();\n            if (source.source instanceof MediaStream) {\n                source.source.getTracks().forEach((track: MediaStreamTrack) => {\n                    track.enabled = false;\n                    track.stop();\n                    (source.source as MediaStream).removeTrack(track);\n                })\n            }\n            this.sources.delete(id);\n        }\n        // Clear canvas if there is no stream to draw;\n        if (!this.sources.size) {\n            setTimeout(() => {\n                if (this.gl) {\n                    this.gl.clear(this.gl.COLOR_BUFFER_BIT | this.gl.DEPTH_BUFFER_BIT);\n                    this.gl.clearDepth(this.gl.getParameter(this.gl.DEPTH_CLEAR_VALUE));\n                }\n            }, 50);\n        }\n    }\n\n    getSources(): Readonly<Array<SourceItem>> {\n        const sources: Array<SourceItem> = [];\n        this.sources.forEach((source: SourceItem) => sources.push(Object.freeze(source)));\n        return Object.freeze(sources);\n    }\n\n    updateIndex(id: string, index: number) {\n        const stream = this.sources.get(id);\n        if (stream) {\n            this.sources.set(id, {...stream, index});\n            this.sortSources();\n        }\n    }\n\n    // Sources visual source by index\n    private sortSources() {\n        const streams = Array.from(this.sources);\n        if (streams.length) {\n            this.sources = new Map(streams.sort((a, b) => a[1].index - b[1].index));\n        }\n    }\n\n    setOutputSize(width: number, height: number) {\n        this.width = width;\n        this.height = height;\n        this.canvas.setAttribute('width', width.toString());\n        this.canvas.setAttribute('height', height.toString());\n        this.gl.viewport(0, 0, this.canvas.width, this.canvas.height);\n    }\n\n    destroy() {\n        // Remove all visual sources\n        for (const [id] of Array.from(this.sources)) {\n            this.removeStream(id);\n        }\n        // Remove all sound sources inside Mixer\n        if (this.mixer) {\n            for (const [id] of Array.from(this.mixer?.getSources() || new Map())) {\n                this.mixer.removeSource(id);\n            }\n        }\n        if (this.mixer) this.mixer.destroy();\n        this.sources = new Map();\n        this.isRendering = false;\n        this.canvas.remove();\n        this.rxIntervalSub = null;\n        this.result.getTracks().forEach((track: MediaStreamTrack) => {\n            track.enabled = false;\n            track.stop();\n            this.result.removeTrack(track);\n        });\n        this.destroyed = true;\n    }\n}"],"mappings":"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","names":["src_exports","__export","StudioMerger","__toCommonJS","import_rxjs","import_audio_merger","import_nanoid","StudioMerger","options","position","width","height","posX","posY","posW","posH","pixelX","pixelY","x1","x2","y1","y2","canvas","e","vertexShaderSource","fragmentShaderSource","vertexShader","fragmentShader","debugInfo","vendor","renderer","texCoordsBuffer","texCoordsBufferData","texture","size","gridSize","w","h","axis","index","row","source","__spreadProps","__spreadValues","mediaStream","id","stream","video","err","_a","element","vertices","vertexBuffer","sourceId","name","type","AudioMerger","track","sources","streams","a","b"]}